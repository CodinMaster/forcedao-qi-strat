{
  "address": "0xfBb07FdC7a566Faa7254c3eD8CAe8Ab00285526B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PricePerShareLog",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maiAmountIn",
          "type": "uint256"
        }
      ],
      "name": "depositWithMAI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farm",
      "outputs": [
        {
          "internalType": "contract IFarm",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quickswapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a97f508e4816e7a31cf0f45d52ac8c7811ce9a1c17b02c6cd0138c0e83e497e",
  "receipt": {
    "to": null,
    "from": "0x4C0eC645377361562B480A5BBd7e2Bd111565310",
    "contractAddress": "0xfBb07FdC7a566Faa7254c3eD8CAe8Ab00285526B",
    "transactionIndex": 18,
    "gasUsed": "1979439",
    "logsBloom": "0x
    "blockHash": "0xc722fa19eca498fac9307e47e59b395c172d14c1e0dba17e7f98662fb4a1053d",
    "transactionHash": "0x7a97f508e4816e7a31cf0f45d52ac8c7811ce9a1c17b02c6cd0138c0e83e497e",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 16472292,
        "transactionHash": "0x7a97f508e4816e7a31cf0f45d52ac8c7811ce9a1c17b02c6cd0138c0e83e497e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004c0ec645377361562b480a5bbd7e2bd111565310",
          "0x000000000000000000000000b79fad4ca981472442f53d16365fdf0305ffd8e9"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000e10941ce62c0000000000000000000000000000000000000000000000000069c23c2aca9ed380000000000000000000000000000000000000000000000b380782561b5f51c4c800000000000000000000000000000000000000000000000069b42b96adb8a780000000000000000000000000000000000000000000000b38079066af7c37f0c8",
        "logIndex": 88,
        "blockHash": "0xc722fa19eca498fac9307e47e59b395c172d14c1e0dba17e7f98662fb4a1053d"
      }
    ],
    "blockNumber": 16472292,
    "cumulativeGasUsed": "6561270",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6ab683795df088517814e2c02b66e2cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PricePerShareLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maiAmountIn\",\"type\":\"uint256\"}],\"name\":\"depositWithMAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farm\",\"outputs\":[{\"internalType\":\"contract IFarm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quickswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ForceDAO_QIStrat.sol\":\"ForceDAO_QIStrat\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x418cfe64226a974419f8ab7287ad4bb413156a4d7af8ab5d9bcaa5678d1a2f22\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/ForceDAO_QIStrat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary Babylonian {\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n        // else z = 0\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function token0() external pure returns (address);\\r\\n\\r\\n    function token1() external pure returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 _reserve0,\\r\\n            uint112 _reserve1,\\r\\n            uint32 _blockTimestampLast\\r\\n        );\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IFarm {\\r\\n    function deposit(uint256 _pid, uint256 _amount) external;\\r\\n\\r\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\r\\n\\r\\n    function deposited(uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function pending(uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\\r\\n\\r\\ncontract ForceDAO_QIStrat is ERC20 {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IUniswapV2Router02 public constant quickswapRouter =\\r\\n        IUniswapV2Router02(0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff);\\r\\n\\r\\n    IERC20 public constant underlying =\\r\\n        IERC20(0x7AfcF11F3e2f01e71B7Cc6b8B5e707E42e6Ea397);\\r\\n    IFarm public constant farm =\\r\\n        IFarm(0x574Fe4E8120C4Da1741b5Fd45584de7A5b521F0F);\\r\\n    uint256 public constant pid = 2;\\r\\n    address public constant QI = 0x580A84C73811E1839F75d86d75d88cCa0c241fF4;\\r\\n    address public constant MAI = 0xa3Fa99A148fA48D14Ed51d610c367C61876997F1; // formerly miMatic\\r\\n\\r\\n    event PricePerShareLog(uint256);\\r\\n\\r\\n    constructor() ERC20(\\\"Force MAI/QI Strategy\\\", \\\"F_MAI/QI\\\") {}\\r\\n\\r\\n    // --- Execute Functions ---\\r\\n\\r\\n    // deposit() and withdraw() both result in the claiming of rewards (QI)\\r\\n    // from the farm, so it's advised to call harvest() just after these calls to\\r\\n    // instantly put the new rewards to work by compounding\\r\\n\\r\\n    // ! the underlying farm has 0.5% deposit fees\\r\\n    function deposit(uint256 amountIn) external {\\r\\n        uint256 _preBalance = balance();\\r\\n        _deposit(_preBalance, amountIn, true);\\r\\n    }\\r\\n\\r\\n    function _deposit(\\r\\n        uint256 _preBalance,\\r\\n        uint256 amountIn,\\r\\n        bool shouldTransferFrom\\r\\n    ) internal {\\r\\n        // get underlying tokens from user\\r\\n        if (shouldTransferFrom) {\\r\\n            underlying.safeTransferFrom(msg.sender, address(this), amountIn);\\r\\n        }\\r\\n\\r\\n        // stake into farm\\r\\n        underlying.safeApprove(address(farm), amountIn);\\r\\n        farm.deposit(pid, amountIn);\\r\\n        // effective amount deposited (after pool's 0.5% fee)\\r\\n        uint256 amtDeposited = balance() - _preBalance;\\r\\n\\r\\n        // mint shares for user\\r\\n        uint256 shares = 0;\\r\\n        if (totalSupply() == 0) {\\r\\n            shares = amtDeposited;\\r\\n        } else {\\r\\n            shares = (amtDeposited * totalSupply()) / _preBalance;\\r\\n        }\\r\\n        _mint(msg.sender, shares);\\r\\n\\r\\n        _emitPricePerShare();\\r\\n    }\\r\\n\\r\\n    function depositWithMAI(uint256 maiAmountIn) external {\\r\\n        uint256 _pool = balance();\\r\\n\\r\\n        // get MAI from user\\r\\n        IERC20(MAI).safeTransferFrom(msg.sender, address(this), maiAmountIn);\\r\\n\\r\\n        /// --- get `underlying` LP ---\\r\\n        // get amount to swap\\r\\n        (, uint256 res1, ) = IUniswapV2Pair(address(underlying)).getReserves();\\r\\n        // token0: QI\\r\\n        // token1: MAI\\r\\n        uint256 maiAmountToSwap = calculateSwapInAmount(res1, maiAmountIn);\\r\\n\\r\\n        // swap required MAI to QI\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = MAI;\\r\\n        path[1] = QI;\\r\\n\\r\\n        IERC20(MAI).safeApprove(address(quickswapRouter), 0);\\r\\n        IERC20(MAI).safeApprove(address(quickswapRouter), maiAmountIn);\\r\\n        uint256 qiReceived = quickswapRouter.swapExactTokensForTokens(\\r\\n            maiAmountToSwap,\\r\\n            1,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        )[path.length - 1];\\r\\n\\r\\n        // add QI and MAI to Sushiswap Pool, get underlying\\r\\n        // MAI already approved above, so just approveing QI here\\r\\n        IERC20(QI).safeApprove(address(quickswapRouter), 0);\\r\\n        IERC20(QI).safeApprove(address(quickswapRouter), qiReceived);\\r\\n        quickswapRouter.addLiquidity(\\r\\n            QI,\\r\\n            MAI,\\r\\n            qiReceived,\\r\\n            maiAmountIn - maiAmountToSwap,\\r\\n            1,\\r\\n            1,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n        uint256 underlyingReceived = underlying.balanceOf(address(this));\\r\\n\\r\\n        // stake and mint shares for user\\r\\n        _deposit(_pool, underlyingReceived, false);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 shares) external {\\r\\n        _emitPricePerShare();\\r\\n\\r\\n        // burn user shares\\r\\n        uint256 underlyingAmt = (balance() * shares) / totalSupply();\\r\\n        _burn(msg.sender, shares);\\r\\n\\r\\n        // withdraw underlying from farm\\r\\n        farm.withdraw(pid, underlyingAmt);\\r\\n\\r\\n        // send underlying to user\\r\\n        underlying.safeTransfer(msg.sender, underlyingAmt);\\r\\n    }\\r\\n\\r\\n    function _emitPricePerShare() internal {\\r\\n        emit PricePerShareLog(pricePerShare());\\r\\n    }\\r\\n\\r\\n    // 1. claim QI reward\\r\\n    // 2. swap some QI to MAI\\r\\n    // 3. Add QI+MAI to Sushiswap Pool, get underlying\\r\\n    // 4. Stake underlying back into farm\\r\\n    function harvest() external {\\r\\n        // claim rewards\\r\\n        farm.deposit(pid, 0);\\r\\n        uint256 QIBalance = IERC20(QI).balanceOf(address(this));\\r\\n\\r\\n        // get amount to swap\\r\\n        (uint256 res0, , ) = IUniswapV2Pair(address(underlying)).getReserves();\\r\\n        // token0: QI\\r\\n        // token1: MAI\\r\\n        uint256 QIAmountToSwap = calculateSwapInAmount(res0, QIBalance);\\r\\n\\r\\n        // swap required QI to MAI\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = QI;\\r\\n        path[1] = MAI;\\r\\n\\r\\n        IERC20(QI).safeApprove(address(quickswapRouter), 0);\\r\\n        IERC20(QI).safeApprove(address(quickswapRouter), QIBalance);\\r\\n        uint256 maiReceived = quickswapRouter.swapExactTokensForTokens(\\r\\n            QIAmountToSwap,\\r\\n            1,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        )[path.length - 1];\\r\\n\\r\\n        // add QI and MAI to Sushiswap Pool, get underlying\\r\\n        // QI already approved above, so just approveing MAI here\\r\\n        IERC20(MAI).safeApprove(address(quickswapRouter), 0);\\r\\n        IERC20(MAI).safeApprove(address(quickswapRouter), maiReceived);\\r\\n        quickswapRouter.addLiquidity(\\r\\n            QI,\\r\\n            MAI,\\r\\n            maiReceived,\\r\\n            QIBalance - QIAmountToSwap,\\r\\n            1,\\r\\n            1,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        // stake into farm\\r\\n        uint256 underlyingReceived = underlying.balanceOf(address(this));\\r\\n        underlying.safeApprove(address(farm), underlyingReceived);\\r\\n        farm.deposit(pid, underlyingReceived);\\r\\n    }\\r\\n\\r\\n    // --- Public View Functions ---\\r\\n\\r\\n    function pendingRewards() external view returns (uint256 amount) {\\r\\n        return farm.pending(pid, address(this));\\r\\n    }\\r\\n\\r\\n    // total underlying tokens staked in farming contract\\r\\n    function balance() public view returns (uint256) {\\r\\n        return farm.deposited(pid, address(this));\\r\\n    }\\r\\n\\r\\n    function pricePerShare() public view returns (uint256) {\\r\\n        if (totalSupply() == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return (balance() * 1e18) / totalSupply();\\r\\n    }\\r\\n\\r\\n    // --- Internal View Functions ---\\r\\n\\r\\n    function calculateSwapInAmount(uint256 reserveIn, uint256 userIn)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            (Babylonian.sqrt(\\r\\n                reserveIn * ((userIn * 3988000) + (reserveIn * 3988009))\\r\\n            ) - (reserveIn * 1997)) / 1994;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd8d1dca2c8ce3af221152306d4abdce597b11dd08607c9659e480be3773d8506\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604080518082018252601581527f466f726365204d41492f51492053747261746567790000000000000000000000602080830191825283518085019094526008845267465f4d41492f514960c01b908401528151919291620000779160039162000096565b5080516200008d90600490602084019062000096565b50505062000179565b828054620000a4906200013c565b90600052602060002090601f016020900481019282620000c8576000855562000113565b82601f10620000e357805160ff191683800117855562000113565b8280016001018555821562000113579182015b8281111562000113578251825591602001919060010190620000f6565b506200012192915062000125565b5090565b5b8082111562000121576000815560010162000126565b600181811c908216806200015157607f821691505b602082108114156200017357634e487b7160e01b600052602260045260246000fd5b50919050565b6121ef80620001896000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806370a08231116100c3578063b69ef8a81161007c578063b69ef8a8146102fa578063b6b55f2514610302578063dd62ed3e14610315578063e4abe0091461034e578063eded3fda14610361578063f10684541461036957600080fd5b806370a08231146102865780638d87c4eb146102af57806395d89b41146102c457806399530b06146102cc578063a457c2d7146102d4578063a9059cbb146102e757600080fd5b8063313ce56711610115578063313ce5671461020b57806336e9332d1461021a57806339509351146102355780634641257d146102485780635f22f53f146102505780636f307dc31461026b57600080fd5b806306fdde031461015d578063095ea7b31461017b57806318160ddd1461019e57806318636ada146101b057806323b872dd146101e35780632e1a7d4d146101f6575b600080fd5b610165610371565b6040516101729190611fe2565b60405180910390f35b61018e610189366004611dbc565b610403565b6040519015158152602001610172565b6002545b604051908152602001610172565b6101cb73a3fa99a148fa48d14ed51d610c367c61876997f181565b6040516001600160a01b039091168152602001610172565b61018e6101f1366004611d80565b610419565b610209610204366004611f1d565b6104ca565b005b60405160128152602001610172565b6101cb73574fe4e8120c4da1741b5fd45584de7a5b521f0f81565b61018e610243366004611dbc565b610598565b6102096105d4565b6101cb73580a84c73811e1839f75d86d75d88cca0c241ff481565b6101cb737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea39781565b6101a2610294366004611d32565b6001600160a01b031660009081526020819052604090205490565b6101cb60008051602061219a83398151915281565b610165610b7d565b6101a2610b8c565b61018e6102e2366004611dbc565b610bcd565b61018e6102f5366004611dbc565b610c66565b6101a2610c73565b610209610310366004611f1d565b610d00565b6101a2610323366004611d4d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61020961035c366004611f1d565b610d18565b6101a2611168565b6101a2600281565b60606003805461038090612122565b80601f01602080910402602001604051908101604052809291908181526020018280546103ac90612122565b80156103f95780601f106103ce576101008083540402835291602001916103f9565b820191906000526020600020905b8154815290600101906020018083116103dc57829003601f168201915b5050505050905090565b60006104103384846111a9565b50600192915050565b60006104268484846112ce565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156104b05760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6104bd85338584036111a9565b60019150505b9392505050565b6104d261149e565b60006104dd60025490565b826104e6610c73565b6104f091906120c0565b6104fa919061209e565b905061050633836114da565b604051630441a3e760e41b8152600260048201526024810182905273574fe4e8120c4da1741b5fd45584de7a5b521f0f9063441a3e7090604401600060405180830381600087803b15801561055a57600080fd5b505af115801561056e573d6000803e3d6000fd5b506105949250737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea397915033905083611625565b5050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104109185906105cf908690612086565b6111a9565b604051631c57762b60e31b8152600260048201526000602482015273574fe4e8120c4da1741b5fd45584de7a5b521f0f9063e2bbb15890604401600060405180830381600087803b15801561062857600080fd5b505af115801561063c573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201526000925073580a84c73811e1839f75d86d75d88cca0c241ff491506370a082319060240160206040518083038186803b15801561068d57600080fd5b505afa1580156106a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c59190611f36565b90506000737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea3976001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561071657600080fd5b505afa15801561072a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074e9190611ecd565b50506001600160701b0316905060006107678284611688565b604080516002808252606082018352929350600092909160208301908036833701905050905073580a84c73811e1839f75d86d75d88cca0c241ff4816000815181106107b5576107b561216d565b60200260200101906001600160a01b031690816001600160a01b03168152505073a3fa99a148fa48d14ed51d610c367c61876997f1816001815181106107fd576107fd61216d565b6001600160a01b039092166020928302919091019091015261084373580a84c73811e1839f75d86d75d88cca0c241ff460008051602061219a83398151915260006116e3565b61087073580a84c73811e1839f75d86d75d88cca0c241ff460008051602061219a833981519152866116e3565b6040516338ed173960e01b815260009060008051602061219a833981519152906338ed1739906108ad908690600190879030904290600401612015565b600060405180830381600087803b1580156108c757600080fd5b505af11580156108db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109039190810190611de6565b6001835161091191906120df565b815181106109215761092161216d565b6020908102919091010151905061095c73a3fa99a148fa48d14ed51d610c367c61876997f160008051602061219a83398151915260006116e3565b61098973a3fa99a148fa48d14ed51d610c367c61876997f160008051602061219a833981519152836116e3565b60008051602061219a83398151915263e8e3370073580a84c73811e1839f75d86d75d88cca0c241ff473a3fa99a148fa48d14ed51d610c367c61876997f1846109d2888b6120df565b60018030426040518963ffffffff1660e01b81526004016109fa989796959493929190611f99565b606060405180830381600087803b158015610a1457600080fd5b505af1158015610a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4c9190611f4f565b50506040516370a0823160e01b815230600482015260009150737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea397906370a082319060240160206040518083038186803b158015610a9c57600080fd5b505afa158015610ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad49190611f36565b9050610b09737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea39773574fe4e8120c4da1741b5fd45584de7a5b521f0f836116e3565b604051631c57762b60e31b8152600260048201526024810182905273574fe4e8120c4da1741b5fd45584de7a5b521f0f9063e2bbb15890604401600060405180830381600087803b158015610b5d57600080fd5b505af1158015610b71573d6000803e3d6000fd5b50505050505050505050565b60606004805461038090612122565b6000610b9760025490565b610ba15750600090565b600254610bac610c73565b610bbe90670de0b6b3a76400006120c0565b610bc8919061209e565b905090565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610c4f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016104a7565b610c5c33858584036111a9565b5060019392505050565b60006104103384846112ce565b60405163511c188360e11b81526002600482015230602482015260009073574fe4e8120c4da1741b5fd45584de7a5b521f0f9063a2383106906044015b60206040518083038186803b158015610cc857600080fd5b505afa158015610cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc89190611f36565b6000610d0a610c73565b905061059481836001611807565b6000610d22610c73565b9050610d4473a3fa99a148fa48d14ed51d610c367c61876997f1333085611933565b6000737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea3976001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610d9357600080fd5b505afa158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcb9190611ecd565b506001600160701b03169150506000610de48285611688565b604080516002808252606082018352929350600092909160208301908036833701905050905073a3fa99a148fa48d14ed51d610c367c61876997f181600081518110610e3257610e3261216d565b60200260200101906001600160a01b031690816001600160a01b03168152505073580a84c73811e1839f75d86d75d88cca0c241ff481600181518110610e7a57610e7a61216d565b6001600160a01b0390921660209283029190910190910152610ec073a3fa99a148fa48d14ed51d610c367c61876997f160008051602061219a83398151915260006116e3565b610eed73a3fa99a148fa48d14ed51d610c367c61876997f160008051602061219a833981519152876116e3565b6040516338ed173960e01b815260009060008051602061219a833981519152906338ed173990610f2a908690600190879030904290600401612015565b600060405180830381600087803b158015610f4457600080fd5b505af1158015610f58573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f809190810190611de6565b60018351610f8e91906120df565b81518110610f9e57610f9e61216d565b60209081029190910101519050610fd973580a84c73811e1839f75d86d75d88cca0c241ff460008051602061219a83398151915260006116e3565b61100673580a84c73811e1839f75d86d75d88cca0c241ff460008051602061219a833981519152836116e3565b60008051602061219a83398151915263e8e3370073580a84c73811e1839f75d86d75d88cca0c241ff473a3fa99a148fa48d14ed51d610c367c61876997f18461104f888c6120df565b60018030426040518963ffffffff1660e01b8152600401611077989796959493929190611f99565b606060405180830381600087803b15801561109157600080fd5b505af11580156110a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c99190611f4f565b50506040516370a0823160e01b815230600482015260009150737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea397906370a082319060240160206040518083038186803b15801561111957600080fd5b505afa15801561112d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111519190611f36565b905061115f86826000611807565b50505050505050565b60405163e4c75c2760e01b81526002600482015230602482015260009073574fe4e8120c4da1741b5fd45584de7a5b521f0f9063e4c75c2790604401610cb0565b6001600160a01b03831661120b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104a7565b6001600160a01b03821661126c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104a7565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166113325760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104a7565b6001600160a01b0382166113945760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104a7565b6001600160a01b0383166000908152602081905260409020548181101561140c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104a7565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611443908490612086565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161148f91815260200190565b60405180910390a35b50505050565b7fb41604af38b104ac354076cd26f5aea851a324ccb70a569d31fa4ea72f7876b36114c7610b8c565b60405190815260200160405180910390a1565b6001600160a01b03821661153a5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016104a7565b6001600160a01b038216600090815260208190526040902054818110156115ae5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016104a7565b6001600160a01b03831660009081526020819052604081208383039055600280548492906115dd9084906120df565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016112c1565b505050565b6040516001600160a01b03831660248201526044810182905261162090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261196b565b60006107ca611699846107cd6120c0565b6116cf6116a986623cda296120c0565b6116b686623cda206120c0565b6116c09190612086565b6116ca90876120c0565b611a3d565b6116d991906120df565b6104c3919061209e565b80158061176c5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561173257600080fd5b505afa158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190611f36565b155b6117d75760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016104a7565b6040516001600160a01b03831660248201526044810182905261162090849063095ea7b360e01b90606401611651565b801561182d5761182d737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea397333085611933565b611860737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea39773574fe4e8120c4da1741b5fd45584de7a5b521f0f846116e3565b604051631c57762b60e31b8152600260048201526024810183905273574fe4e8120c4da1741b5fd45584de7a5b521f0f9063e2bbb15890604401600060405180830381600087803b1580156118b457600080fd5b505af11580156118c8573d6000803e3d6000fd5b505050506000836118d7610c73565b6118e191906120df565b905060006118ee60025490565b6118f957508061191a565b8461190360025490565b61190d90846120c0565b611917919061209e565b90505b6119243382611aad565b61192c61149e565b5050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526114989085906323b872dd60e01b90608401611651565b60006119c0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b8c9092919063ffffffff16565b80519091501561162057808060200190518101906119de9190611eab565b6116205760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104a7565b60006003821115611a9e5750806000611a5760028361209e565b611a62906001612086565b90505b81811015611a9857905080600281611a7d818661209e565b611a879190612086565b611a91919061209e565b9050611a65565b50919050565b8115611aa8575060015b919050565b6001600160a01b038216611b035760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104a7565b8060026000828254611b159190612086565b90915550506001600160a01b03821660009081526020819052604081208054839290611b42908490612086565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6060611b9b8484600085611ba3565b949350505050565b606082471015611c045760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104a7565b843b611c525760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104a7565b600080866001600160a01b03168587604051611c6e9190611f7d565b60006040518083038185875af1925050503d8060008114611cab576040519150601f19603f3d011682016040523d82523d6000602084013e611cb0565b606091505b5091509150611cc0828286611ccb565b979650505050505050565b60608315611cda5750816104c3565b825115611cea5782518084602001fd5b8160405162461bcd60e51b81526004016104a79190611fe2565b80356001600160a01b0381168114611aa857600080fd5b80516001600160701b0381168114611aa857600080fd5b600060208284031215611d4457600080fd5b6104c382611d04565b60008060408385031215611d6057600080fd5b611d6983611d04565b9150611d7760208401611d04565b90509250929050565b600080600060608486031215611d9557600080fd5b611d9e84611d04565b9250611dac60208501611d04565b9150604084013590509250925092565b60008060408385031215611dcf57600080fd5b611dd883611d04565b946020939093013593505050565b60006020808385031215611df957600080fd5b825167ffffffffffffffff80821115611e1157600080fd5b818501915085601f830112611e2557600080fd5b815181811115611e3757611e37612183565b8060051b604051601f19603f83011681018181108582111715611e5c57611e5c612183565b604052828152858101935084860182860187018a1015611e7b57600080fd5b600095505b83861015611e9e578051855260019590950194938601938601611e80565b5098975050505050505050565b600060208284031215611ebd57600080fd5b815180151581146104c357600080fd5b600080600060608486031215611ee257600080fd5b611eeb84611d1b565b9250611ef960208501611d1b565b9150604084015163ffffffff81168114611f1257600080fd5b809150509250925092565b600060208284031215611f2f57600080fd5b5035919050565b600060208284031215611f4857600080fd5b5051919050565b600080600060608486031215611f6457600080fd5b8351925060208401519150604084015190509250925092565b60008251611f8f8184602087016120f6565b9190910192915050565b6001600160a01b039889168152968816602088015260408701959095526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b60208152600082518060208401526120018160408501602087016120f6565b601f01601f19169190910160400192915050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156120655784516001600160a01b031683529383019391830191600101612040565b50506001600160a01b03969096166060850152505050608001529392505050565b6000821982111561209957612099612157565b500190565b6000826120bb57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156120da576120da612157565b500290565b6000828210156120f1576120f1612157565b500390565b60005b838110156121115781810151838201526020016120f9565b838111156114985750506000910152565b600181811c9082168061213657607f821691505b60208210811415611a9857634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ffa26469706673582212202c7a6fb815f653e3a35604babed4ac649f4acd24bd7de9d80352cce5945964af64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c806370a08231116100c3578063b69ef8a81161007c578063b69ef8a8146102fa578063b6b55f2514610302578063dd62ed3e14610315578063e4abe0091461034e578063eded3fda14610361578063f10684541461036957600080fd5b806370a08231146102865780638d87c4eb146102af57806395d89b41146102c457806399530b06146102cc578063a457c2d7146102d4578063a9059cbb146102e757600080fd5b8063313ce56711610115578063313ce5671461020b57806336e9332d1461021a57806339509351146102355780634641257d146102485780635f22f53f146102505780636f307dc31461026b57600080fd5b806306fdde031461015d578063095ea7b31461017b57806318160ddd1461019e57806318636ada146101b057806323b872dd146101e35780632e1a7d4d146101f6575b600080fd5b610165610371565b6040516101729190611fe2565b60405180910390f35b61018e610189366004611dbc565b610403565b6040519015158152602001610172565b6002545b604051908152602001610172565b6101cb73a3fa99a148fa48d14ed51d610c367c61876997f181565b6040516001600160a01b039091168152602001610172565b61018e6101f1366004611d80565b610419565b610209610204366004611f1d565b6104ca565b005b60405160128152602001610172565b6101cb73574fe4e8120c4da1741b5fd45584de7a5b521f0f81565b61018e610243366004611dbc565b610598565b6102096105d4565b6101cb73580a84c73811e1839f75d86d75d88cca0c241ff481565b6101cb737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea39781565b6101a2610294366004611d32565b6001600160a01b031660009081526020819052604090205490565b6101cb60008051602061219a83398151915281565b610165610b7d565b6101a2610b8c565b61018e6102e2366004611dbc565b610bcd565b61018e6102f5366004611dbc565b610c66565b6101a2610c73565b610209610310366004611f1d565b610d00565b6101a2610323366004611d4d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61020961035c366004611f1d565b610d18565b6101a2611168565b6101a2600281565b60606003805461038090612122565b80601f01602080910402602001604051908101604052809291908181526020018280546103ac90612122565b80156103f95780601f106103ce576101008083540402835291602001916103f9565b820191906000526020600020905b8154815290600101906020018083116103dc57829003601f168201915b5050505050905090565b60006104103384846111a9565b50600192915050565b60006104268484846112ce565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156104b05760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6104bd85338584036111a9565b60019150505b9392505050565b6104d261149e565b60006104dd60025490565b826104e6610c73565b6104f091906120c0565b6104fa919061209e565b905061050633836114da565b604051630441a3e760e41b8152600260048201526024810182905273574fe4e8120c4da1741b5fd45584de7a5b521f0f9063441a3e7090604401600060405180830381600087803b15801561055a57600080fd5b505af115801561056e573d6000803e3d6000fd5b506105949250737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea397915033905083611625565b5050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104109185906105cf908690612086565b6111a9565b604051631c57762b60e31b8152600260048201526000602482015273574fe4e8120c4da1741b5fd45584de7a5b521f0f9063e2bbb15890604401600060405180830381600087803b15801561062857600080fd5b505af115801561063c573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201526000925073580a84c73811e1839f75d86d75d88cca0c241ff491506370a082319060240160206040518083038186803b15801561068d57600080fd5b505afa1580156106a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c59190611f36565b90506000737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea3976001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561071657600080fd5b505afa15801561072a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074e9190611ecd565b50506001600160701b0316905060006107678284611688565b604080516002808252606082018352929350600092909160208301908036833701905050905073580a84c73811e1839f75d86d75d88cca0c241ff4816000815181106107b5576107b561216d565b60200260200101906001600160a01b031690816001600160a01b03168152505073a3fa99a148fa48d14ed51d610c367c61876997f1816001815181106107fd576107fd61216d565b6001600160a01b039092166020928302919091019091015261084373580a84c73811e1839f75d86d75d88cca0c241ff460008051602061219a83398151915260006116e3565b61087073580a84c73811e1839f75d86d75d88cca0c241ff460008051602061219a833981519152866116e3565b6040516338ed173960e01b815260009060008051602061219a833981519152906338ed1739906108ad908690600190879030904290600401612015565b600060405180830381600087803b1580156108c757600080fd5b505af11580156108db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109039190810190611de6565b6001835161091191906120df565b815181106109215761092161216d565b6020908102919091010151905061095c73a3fa99a148fa48d14ed51d610c367c61876997f160008051602061219a83398151915260006116e3565b61098973a3fa99a148fa48d14ed51d610c367c61876997f160008051602061219a833981519152836116e3565b60008051602061219a83398151915263e8e3370073580a84c73811e1839f75d86d75d88cca0c241ff473a3fa99a148fa48d14ed51d610c367c61876997f1846109d2888b6120df565b60018030426040518963ffffffff1660e01b81526004016109fa989796959493929190611f99565b606060405180830381600087803b158015610a1457600080fd5b505af1158015610a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4c9190611f4f565b50506040516370a0823160e01b815230600482015260009150737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea397906370a082319060240160206040518083038186803b158015610a9c57600080fd5b505afa158015610ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad49190611f36565b9050610b09737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea39773574fe4e8120c4da1741b5fd45584de7a5b521f0f836116e3565b604051631c57762b60e31b8152600260048201526024810182905273574fe4e8120c4da1741b5fd45584de7a5b521f0f9063e2bbb15890604401600060405180830381600087803b158015610b5d57600080fd5b505af1158015610b71573d6000803e3d6000fd5b50505050505050505050565b60606004805461038090612122565b6000610b9760025490565b610ba15750600090565b600254610bac610c73565b610bbe90670de0b6b3a76400006120c0565b610bc8919061209e565b905090565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610c4f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016104a7565b610c5c33858584036111a9565b5060019392505050565b60006104103384846112ce565b60405163511c188360e11b81526002600482015230602482015260009073574fe4e8120c4da1741b5fd45584de7a5b521f0f9063a2383106906044015b60206040518083038186803b158015610cc857600080fd5b505afa158015610cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc89190611f36565b6000610d0a610c73565b905061059481836001611807565b6000610d22610c73565b9050610d4473a3fa99a148fa48d14ed51d610c367c61876997f1333085611933565b6000737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea3976001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610d9357600080fd5b505afa158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcb9190611ecd565b506001600160701b03169150506000610de48285611688565b604080516002808252606082018352929350600092909160208301908036833701905050905073a3fa99a148fa48d14ed51d610c367c61876997f181600081518110610e3257610e3261216d565b60200260200101906001600160a01b031690816001600160a01b03168152505073580a84c73811e1839f75d86d75d88cca0c241ff481600181518110610e7a57610e7a61216d565b6001600160a01b0390921660209283029190910190910152610ec073a3fa99a148fa48d14ed51d610c367c61876997f160008051602061219a83398151915260006116e3565b610eed73a3fa99a148fa48d14ed51d610c367c61876997f160008051602061219a833981519152876116e3565b6040516338ed173960e01b815260009060008051602061219a833981519152906338ed173990610f2a908690600190879030904290600401612015565b600060405180830381600087803b158015610f4457600080fd5b505af1158015610f58573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f809190810190611de6565b60018351610f8e91906120df565b81518110610f9e57610f9e61216d565b60209081029190910101519050610fd973580a84c73811e1839f75d86d75d88cca0c241ff460008051602061219a83398151915260006116e3565b61100673580a84c73811e1839f75d86d75d88cca0c241ff460008051602061219a833981519152836116e3565b60008051602061219a83398151915263e8e3370073580a84c73811e1839f75d86d75d88cca0c241ff473a3fa99a148fa48d14ed51d610c367c61876997f18461104f888c6120df565b60018030426040518963ffffffff1660e01b8152600401611077989796959493929190611f99565b606060405180830381600087803b15801561109157600080fd5b505af11580156110a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c99190611f4f565b50506040516370a0823160e01b815230600482015260009150737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea397906370a082319060240160206040518083038186803b15801561111957600080fd5b505afa15801561112d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111519190611f36565b905061115f86826000611807565b50505050505050565b60405163e4c75c2760e01b81526002600482015230602482015260009073574fe4e8120c4da1741b5fd45584de7a5b521f0f9063e4c75c2790604401610cb0565b6001600160a01b03831661120b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104a7565b6001600160a01b03821661126c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104a7565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166113325760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104a7565b6001600160a01b0382166113945760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104a7565b6001600160a01b0383166000908152602081905260409020548181101561140c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104a7565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611443908490612086565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161148f91815260200190565b60405180910390a35b50505050565b7fb41604af38b104ac354076cd26f5aea851a324ccb70a569d31fa4ea72f7876b36114c7610b8c565b60405190815260200160405180910390a1565b6001600160a01b03821661153a5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016104a7565b6001600160a01b038216600090815260208190526040902054818110156115ae5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016104a7565b6001600160a01b03831660009081526020819052604081208383039055600280548492906115dd9084906120df565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016112c1565b505050565b6040516001600160a01b03831660248201526044810182905261162090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261196b565b60006107ca611699846107cd6120c0565b6116cf6116a986623cda296120c0565b6116b686623cda206120c0565b6116c09190612086565b6116ca90876120c0565b611a3d565b6116d991906120df565b6104c3919061209e565b80158061176c5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561173257600080fd5b505afa158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190611f36565b155b6117d75760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016104a7565b6040516001600160a01b03831660248201526044810182905261162090849063095ea7b360e01b90606401611651565b801561182d5761182d737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea397333085611933565b611860737afcf11f3e2f01e71b7cc6b8b5e707e42e6ea39773574fe4e8120c4da1741b5fd45584de7a5b521f0f846116e3565b604051631c57762b60e31b8152600260048201526024810183905273574fe4e8120c4da1741b5fd45584de7a5b521f0f9063e2bbb15890604401600060405180830381600087803b1580156118b457600080fd5b505af11580156118c8573d6000803e3d6000fd5b505050506000836118d7610c73565b6118e191906120df565b905060006118ee60025490565b6118f957508061191a565b8461190360025490565b61190d90846120c0565b611917919061209e565b90505b6119243382611aad565b61192c61149e565b5050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526114989085906323b872dd60e01b90608401611651565b60006119c0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b8c9092919063ffffffff16565b80519091501561162057808060200190518101906119de9190611eab565b6116205760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104a7565b60006003821115611a9e5750806000611a5760028361209e565b611a62906001612086565b90505b81811015611a9857905080600281611a7d818661209e565b611a879190612086565b611a91919061209e565b9050611a65565b50919050565b8115611aa8575060015b919050565b6001600160a01b038216611b035760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104a7565b8060026000828254611b159190612086565b90915550506001600160a01b03821660009081526020819052604081208054839290611b42908490612086565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6060611b9b8484600085611ba3565b949350505050565b606082471015611c045760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104a7565b843b611c525760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104a7565b600080866001600160a01b03168587604051611c6e9190611f7d565b60006040518083038185875af1925050503d8060008114611cab576040519150601f19603f3d011682016040523d82523d6000602084013e611cb0565b606091505b5091509150611cc0828286611ccb565b979650505050505050565b60608315611cda5750816104c3565b825115611cea5782518084602001fd5b8160405162461bcd60e51b81526004016104a79190611fe2565b80356001600160a01b0381168114611aa857600080fd5b80516001600160701b0381168114611aa857600080fd5b600060208284031215611d4457600080fd5b6104c382611d04565b60008060408385031215611d6057600080fd5b611d6983611d04565b9150611d7760208401611d04565b90509250929050565b600080600060608486031215611d9557600080fd5b611d9e84611d04565b9250611dac60208501611d04565b9150604084013590509250925092565b60008060408385031215611dcf57600080fd5b611dd883611d04565b946020939093013593505050565b60006020808385031215611df957600080fd5b825167ffffffffffffffff80821115611e1157600080fd5b818501915085601f830112611e2557600080fd5b815181811115611e3757611e37612183565b8060051b604051601f19603f83011681018181108582111715611e5c57611e5c612183565b604052828152858101935084860182860187018a1015611e7b57600080fd5b600095505b83861015611e9e578051855260019590950194938601938601611e80565b5098975050505050505050565b600060208284031215611ebd57600080fd5b815180151581146104c357600080fd5b600080600060608486031215611ee257600080fd5b611eeb84611d1b565b9250611ef960208501611d1b565b9150604084015163ffffffff81168114611f1257600080fd5b809150509250925092565b600060208284031215611f2f57600080fd5b5035919050565b600060208284031215611f4857600080fd5b5051919050565b600080600060608486031215611f6457600080fd5b8351925060208401519150604084015190509250925092565b60008251611f8f8184602087016120f6565b9190910192915050565b6001600160a01b039889168152968816602088015260408701959095526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b60208152600082518060208401526120018160408501602087016120f6565b601f01601f19169190910160400192915050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156120655784516001600160a01b031683529383019391830191600101612040565b50506001600160a01b03969096166060850152505050608001529392505050565b6000821982111561209957612099612157565b500190565b6000826120bb57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156120da576120da612157565b500290565b6000828210156120f1576120f1612157565b500390565b60005b838110156121115781810151838201526020016120f9565b838111156114985750506000910152565b600181811c9082168061213657607f821691505b60208210811415611a9857634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ffa26469706673582212202c7a6fb815f653e3a35604babed4ac649f4acd24bd7de9d80352cce5945964af64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15,
        "contract": "contracts/ForceDAO_QIStrat.sol:ForceDAO_QIStrat",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21,
        "contract": "contracts/ForceDAO_QIStrat.sol:ForceDAO_QIStrat",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 23,
        "contract": "contracts/ForceDAO_QIStrat.sol:ForceDAO_QIStrat",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 25,
        "contract": "contracts/ForceDAO_QIStrat.sol:ForceDAO_QIStrat",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/ForceDAO_QIStrat.sol:ForceDAO_QIStrat",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}